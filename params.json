{"body":"## Usage\r\n***\r\n### SSH 접속\r\n문제를 풀기 위해 SSH에 접속 할 수 있으며 여러 공개된 클라이언트 프로그램을 이용하실 수 있습니다.\r\n별도의 클라이언트 프로그램이 없더라도 Web SSH를 이용하여 접속 가능합니다.\r\n각자 말씀하신 아이디로 접속 가능하며 비밀번호는 아이디와 같습니다. 비밀번호는 passwd 명령어를 통해 변경 가능합니다.\r\n\r\n\r\n### 문제 풀기\r\n각자 접속한 계정의 홈 디렉토리에서 자유롭게 문제를 풀어주시면 됩니다.\r\n결과는 어떠한 경우에도 실행 가능한 바이너리로 존재하면 됩니다. (java의 경우 class, C#의 경우 exe)\r\n예를 들어 p001번 문제를 푸는 경우 소스 코드 작성을 완료 한 후\r\n최종적으로 바이너리를 생성할 때 p001 이름으로 작성하시고 실행 가능한 상태로 놓아두시면 됩니다.\r\n작성한 바이너리를 제출하기 위해서는 다음과 같은 명령어를 사용합니다.\r\n\r\n```\r\n$ algo -s p001\r\n```\r\n\r\n문제를 제출 한 후 결과와 순위를 확인하는 방법은 다음과 같습니다.\r\n\r\n```\r\n$ algo -r p001\r\n```\r\n\r\n결과를 submit하지 않으면 일요일 11:59 PM 이후에 바이너리가 존재한다면 자동 submit됩니다.\r\n측정 점수는 매우 정밀하지 않은 형태이므로 높은 순위를 원하신다면 알고리즘 자체를 개선하는 것이 도움이됩니다.\r\n\r\n기타 문의 사항은 방진호(010-4363-0075, romandev@nate.com)로 직접 해주세요.\r\n\r\n\r\n### 코드 리뷰\r\n작성하신 코드는 매주 일요일 11:59 PM 이후에 github로 자동 commit됩니다. 일주일이 지나면 남이 작성한 코드를 볼 수 있으며 github 계정을 통하여 각자 커멘트를 달거나 코드를 수정하실 수 있습니다.\r\n　\r\n　\r\n## P001 : The 3n + 1 problem\r\n***\r\nConsider the following algorithm to generate a sequence of numbers. Start with an integer n. If n is even, divide by 2. If n is odd, multiply by 3 and add 1. Repeat this process with the new value of n, terminating when n = 1. For example, the following sequence of numbers will be generated for n = 22:\r\n\r\n```\r\n22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1\r\n```\r\n\r\nIt is conjectured (but not yet proven) that this algorithm will terminate at n = 1 for every integer n. Still, the conjecture holds for all integers up to at least 1, 000, 000.\r\nFor an input n, the cycle-length of n is the number of numbers generated up to and including the 1. In the example above, the cycle length of 22 is 16. Given any two numbers i and j, you are to determine the maximum cycle length over all numbers between i and j, including both endpoints.\r\n\r\n\r\n### Input\r\nThe input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0.\r\n\r\n\r\n### Output\r\nFor each pair of input integers i and j, output i, j in the same order in which they appeared in the input and then the maximum cycle length for integers between and including i and j. These three numbers should be separated by one space, with all three numbers on one line and with one line of output for each line of input.\r\n\r\n\r\n### Sample Input\r\n```\r\n1 10\r\n100 200\r\n201 210\r\n900 1000\r\n```\r\n\r\n\r\n### Sample Output\r\n```\r\n1 10 20\r\n100 200 125\r\n201 210 89\r\n900 1000 174\r\n```\r\n　\r\n　\r\n## P002 : Jolly Jumpers\r\n***\r\nA sequence of n > 0 integers is called a jolly jumper if the absolute values of the differences between successive elements take on all possible values 1 through n - 1. For instance,\r\n\r\n```\r\n1 4 2 3\r\n```\r\n\r\nis a jolly jumper, because the absolute differences are 3, 2, and 1, respectively. The definition implies that any sequence of a single integer is a jolly jumper. Write a program to determine whether each of a number of sequences is a jolly jumper.\r\n\r\n\r\n### Input\r\nEach line of input contains an integer n < 3, 000 followed by n integers representing the sequence.\r\n\r\n\r\n### Output\r\nFor each line of input generate a line of output saying \"Jolly\" or \"Not jolly\".\r\n\r\n\r\n### Sample Input\r\n```\r\n4 1 4 2 3\r\n5 1 4 2 -1 6\r\n```\r\n\r\n\r\n### Sample Output\r\n```\r\nJolly\r\nNot jolly\r\n```","name":"Algorithm Study","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"ALGORITHM"}